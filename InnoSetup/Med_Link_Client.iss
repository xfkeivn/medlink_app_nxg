; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "MedLink"
#define MyAppVersion "1.0.2021.1015"
#define MyAppPublisher ""
#define MyAppExeName "Medlink_Start.exe"
#define MyAppLauncherName "Medlink_Start.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{08C51C30-F593-4409-86D2-6D0F2579E5E6}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
DisableDirPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
OutputDir=C:\Users\zhax\Desktop\MDLink Output
OutputBaseFilename=MedLink_Client_Setup.{#MyAppVersion}
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\zhax\Desktop\MDLink Output\Release\{#MyAppLauncherName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\zhax\Desktop\MDLink Output\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKLM; Subkey: "SOFTWARE\{#MyAppName}\Properties"; ValueType: string; ValueName: "IsHost"; ValueData: "False"
Root: HKLM; Subkey: "SOFTWARE\{#MyAppName}\Properties"; ValueType: string; ValueName: "WebServerIP"; ValueData: "47.116.77.151"
Root: HKLM; Subkey: "SOFTWARE\{#MyAppName}\Properties"; ValueType: string; ValueName: "WebServerPort"; ValueData: "9999"
Root: HKLM; Subkey: "SOFTWARE\{#MyAppName}\Properties"; ValueType: string; ValueName:"InstallPath";ValueData:"{app}";

[Code]
var
IsRunning: Boolean;

function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;
    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet := FWMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s"',[FileName]));
    Result := (FWbemObjectSet.Count > 0);
    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

// 安装时判断Med_Link是否已安装
function InitializeSetup(): Boolean;
var 
  isHost:String;
  installPath:String;
  ResultCode:Integer;
begin                                                               
  isHost:= '';
  if RegQueryStringValue(HKLM, 'SOFTWARE\{#MyAppName}\Properties', 'IsHost', isHost) then
    begin
      if isHost <> 'True' then
        begin
          if Msgbox('系统内已安装MedLink client App, 继续安装将卸载已有的MedLink。' #13#13 '单击“是”继续安装，或按“否”退出！', mbConfirmation, MB_YESNO) = idYES then
            begin
              if RegQueryStringValue(HKLM, 'SOFTWARE\{#MyAppName}\Properties', 'InstallPath', installPath) then
                begin
                  installPath:= installPath + '\unins000.exe';
                  Exec(installPath, '/silent', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
                  Result:= true;
                end
            end
          else
              Result:= false
        end
      else
        begin
          if Msgbox('系统内已安装MedLink host App, 继续安装将卸载已有的MedLink。' #13#13 '单击“是”继续安装，或按“否”退出！', mbConfirmation, MB_YESNO) = idYES then
            begin
              if RegQueryStringValue(HKLM, 'SOFTWARE\{#MyAppName}\Properties', 'InstallPath', installPath) then
                begin
                  installPath:= installPath + '\unins000.exe';
                  Exec(installPath, '/silent', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
                  Result:= true;
                end
            end
          else
            Result:= false
        end;
    end
  else
    begin
       Result:= true;
    end;
end;

// 卸载时判断客户端是否正在运行
function InitializeUninstall(): Boolean;
begin                                                               
  Result :=true; //卸载程序继续
  IsRunning:=IsAppRunning('{#MyAppExeName}');
  while IsRunning do
    begin
      if Msgbox('安装程序检测到{#MyAppExeName}正在运行。' #13#13 '您必须先关闭它然后单击“是”继续卸载，或按“否”退出！', mbConfirmation, MB_YESNO) = idNO then
        begin
        Result :=false; //卸载程序退出
        IsRunning :=false;
        end
      else 
        begin
        Result :=true; //卸载程序继续
        IsRunning:=IsAppRunning('{#MyAppExeName}');
        end;
    end;

 end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);

begin

  if CurUninstallStep = usUninstall then

      RegDeleteKeyIncludingSubkeys(HKEY_LOCAL_MACHINE, 'SOFTWARE\{#MyAppName}')

end;

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppLauncherName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppLauncherName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

